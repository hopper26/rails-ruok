<div class="container-map">
<h1>Exercise</h1>

<div id="map"></div>
<div id="geocoder" class ="geocoder"></div>
  <div class="absolute fl my24 mx24 py24 px24 bg-gray-faint round">
    <form id="params">
      <h4 class="txt-m txt-bold mb6">Choose a travel mode:</h4>
      <div class="mb12 mr12 toggle-group align-center">
        <label class="toggle-container">
          <input name="profile" type="radio" value="walking" checked/>
          <div class="toggle toggle--active-null toggle--null">Walking</div>
        </label>
        <label class="toggle-container">
          <input name="profile" type="radio" value="cycling" />
          <div class="toggle toggle--active-null toggle--null">Cycling</div>
        </label>
        <label class="toggle-container">
          <input name="profile" type="radio" value="driving" />
          <div class="toggle toggle--active-null toggle--null">Driving</div>
        </label>
      </div>
      <h4 class="txt-m txt-bold mb6">Choose a maximum duration:</h4>
      <div class="mb12 mr12 toggle-group align-center">
        <label class="toggle-container">
          <input name="duration" type="radio" value="10" checked />
          <div class="toggle toggle--active-null toggle--null">10 min</div>
        </label>
        <label class="toggle-container">
          <input name="duration" type="radio" value="20" />
          <div class="toggle toggle--active-null toggle--null">20 min</div>
        </label>
        <label class="toggle-container">
          <input name="duration" type="radio" value="30" />
          <div class="toggle toggle--active-null toggle--null">30 min</div>
        </label>
      </div>
    </form>
  </div>
</div>

<script>
  mapboxgl.accessToken = 'pk.eyJ1IjoiaGFsdWNhczkzIiwiYSI6ImNsOXhpZ3JrcjBha2szdXBhOGJ1dHEweWsifQ.HBOlhDzuu3Oq52Zhouf39w';

  const map = new mapboxgl.Map({
    container: 'map', // container id
    style: 'mapbox://styles/mapbox/streets-v12', // stylesheet
    center: [144.974265, -37.864562],
    zoom: 13 // starting zoom
  });

  const params = document.getElementById('params');

  const urlBase = 'https://api.mapbox.com/isochrone/v1/mapbox/';
  let lon = 144.974265;
  let lat = -37.864562;
  let profile = 'walking';
  let minutes = 10;

   const lngLat = {
      lon: lon,
      lat: lat
    };

  const geocoder = new MapboxGeocoder({
    accessToken: mapboxgl.accessToken,
    marker: false,
    mapboxgl: mapboxgl,
    flyTo: {
      zoom: 14,
      easing: function (t) {
        return t;
      }
    }
  });

  const geolocate = new mapboxgl.GeolocateControl({
    positionOptions: {
      enableHighAccuracy: true
    },
    trackUserLocation: true,
    showUserHeading: true,
    marker: false,
    flyTo: {
      zoom: 15,
      easing: function (t) {
        return t;
      }
    }
  });

  // Create a function that sets up the Isochrone API query then makes a fetch call
  async function getIso() {
    const query = await fetch(
      `${urlBase}${profile}/${lon},${lat}?contours_minutes=${minutes}&polygons=true&access_token=${mapboxgl.accessToken}`,
      { method: 'GET' }
    );
    const data = await query.json();
    map.getSource('iso').setData(data);
  }

  params.addEventListener('change', (event) => {
    if (event.target.name === 'profile') {
      profile = event.target.value;
    } else if (event.target.name === 'duration') {
      minutes = event.target.value;
    }
    getIso();
  });

  geocoder.on('result', (event) => {
    lon = event.result.geometry.coordinates[0];
    lat = event.result.geometry.coordinates[1];
    getIso();
    map.removeLayer('isoLayer');
    map.addLayer( {
      'id': 'isoLayer',
      'type': 'fill',
      'source': 'iso',
      'layout': {},
      'paint': {
      'fill-color': '#5a3fc0',
      'fill-opacity': 0.3
      }
    },
    'poi-label'
    );
    const el = document.createElement('div');
    el.className = 'marker';

    new mapboxgl.Marker(el)
      .setLngLat([lon,lat])
      .addTo(map);
  });

 geolocate.on('geolocate', (event) => {
    lon = event.coords.longitude;
    lat = event.coords.latitude;
    getIso();
    map.removeLayer('isoLayer');
    map.addLayer( {
      'id': 'isoLayer',
      'type': 'fill',
      'source': 'iso',
      'layout': {},
      'paint': {
      'fill-color': '#5a3fc0',
      'fill-opacity': 0.3
      }
    },
    'poi-label'
    );
    const el = document.createElement('div');
    el.className = 'marker';
    new mapboxgl.Marker(el)
      .setLngLat([lon,lat])
      .addTo(map);
  });

  map.addControl(geocoder);
  map.addControl(geolocate);

  map.addControl(new MapboxDirections({
    accessToken: mapboxgl.accessToken
  }),
  'bottom-left'
  );

  map.on('load', () => {

    map.addSource('iso', {
      type: 'geojson',
      data: {
        'type': 'FeatureCollection',
        'features': []
      }
    });


    map.addLayer( {
      'id': 'isoLayer',
      'type': 'fill',
      'source': 'iso',
      'layout': {},
      'paint': {
      'fill-color': '#5a3fc0',
      'fill-opacity': 0.3
      }
    },
    'poi-label'
    );

    getIso();
});
</script>

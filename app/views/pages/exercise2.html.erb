<h1>Exercise</h1>
<div class="container-map">
<div id="map"></div>
  <div class="absolute fl my24 mx24 py24 px24 bg-gray-faint round">
    <form id="params">
      <h4 class="txt-m txt-bold mb6">Choose a travel mode:</h4>
      <div class="mb12 mr12 toggle-group align-center">
        <label class="toggle-container">
          <input name="profile" type="radio" value="walking" checked/>
          <div class="toggle toggle--active-null toggle--null">Walking</div>
        </label>
        <label class="toggle-container">
          <input name="profile" type="radio" value="cycling" />
          <div class="toggle toggle--active-null toggle--null">Cycling</div>
        </label>
        <label class="toggle-container">
          <input name="profile" type="radio" value="driving" />
          <div class="toggle toggle--active-null toggle--null">Driving</div>
        </label>
      </div>
      <h4 class="txt-m txt-bold mb6">Choose a maximum duration:</h4>
      <div class="mb12 mr12 toggle-group align-center">
        <label class="toggle-container">
          <input name="duration" type="radio" value="10" checked />
          <div class="toggle toggle--active-null toggle--null">10 min</div>
        </label>
        <label class="toggle-container">
          <input name="duration" type="radio" value="20" />
          <div class="toggle toggle--active-null toggle--null">20 min</div>
        </label>
        <label class="toggle-container">
          <input name="duration" type="radio" value="30" />
          <div class="toggle toggle--active-null toggle--null">30 min</div>
        </label>
      </div>
    </form>
  </div>
  </div>

<%# <script>
mapboxgl.accessToken = 'pk.eyJ1IjoiaGFsdWNhczkzIiwiYSI6ImNsOXhpZ3JrcjBha2szdXBhOGJ1dHEweWsifQ.HBOlhDzuu3Oq52Zhouf39w';

const map = new mapboxgl.Map({
  container: 'map', // container id
  style: 'mapbox://styles/mapbox/streets-v12', // stylesheet
  center: [-77.0369, 38.895], // starting position [lng, lat]
  zoom: 11.5 // starting zoom
});

// Target the params form in the HTML
const params = document.getElementById('params');

// Create variables to use in getIso()
const urlBase = 'https://api.mapbox.com/isochrone/v1/mapbox/';
const lon = -77.034;
const lat = 38.899;
let profile = 'cycling';
let minutes = 10;

// Set up a marker that you can use to show the query's coordinates
const marker = new mapboxgl.Marker({
'color': '#314ccd'
});

// Create a LngLat object to use in the marker initialization
// https://docs.mapbox.com/mapbox-gl-js/api/#lnglat
const lngLat = {
lon: lon,
lat: lat
};

// Create a function that sets up the Isochrone API query then makes a fetch call
async function getIso() {
const query = await fetch(
`${urlBase}${profile}/${lon},${lat}?contours_minutes=${minutes}&polygons=true&access_token=${mapboxgl.accessToken}`,
{ method: 'GET' }
);
const data = await query.json();
// Set the 'iso' source's data to what's returned by the API query
map.getSource('iso').setData(data);
}

// When a user changes the value of profile or duration by clicking a button, change the parameter's value and make the API query again
params.addEventListener('change', (event) => {
if (event.target.name === 'profile') {
profile = event.target.value;
} else if (event.target.name === 'duration') {
minutes = event.target.value;
}
getIso();
});

map.on('load', () => {
// When the map loads, add the source and layer
map.addSource('iso', {
type: 'geojson',
data: {
'type': 'FeatureCollection',
'features': []
}
});

map.addLayer(
{
'id': 'isoLayer',
'type': 'fill',
'source': 'iso',
'layout': {},
'paint': {
'fill-color': '#5a3fc0',
'fill-opacity': 0.3
}
},
'poi-label'
);

// Initialize the marker at the query coordinates
marker.setLngLat(lngLat).addTo(map);

// Make the API call
getIso();
});
</script> %>















<%# <% <div id="map"></div>
    <div class='absolute fl my24 mx24 py24 px24 bg-gray-faint round'>
  <form id='params'>
    <h4 class='txt-m txt-bold mb6'>Choose a travel mode:</h4>
    <div class='mb12 mr12 toggle-group align-center'>
      <label class='toggle-container'>
        <input name='profile' type='radio' value='walking' checked>
        <div class='toggle toggle--active-null toggle--null'>Walking</div>
      </label>
      <label class='toggle-container'>
        <input name='profile' type='radio' value='cycling'>
        <div class='toggle toggle--active-null toggle--null'>Cycling</div>
      </label>
      <label class='toggle-container'>
        <input name='profile' type='radio' value='driving'>
        <div class='toggle toggle--active-null toggle--null'>Driving</div>
      </label>
    </div>
    <h4 class='txt-m txt-bold mb6'>Choose a maximum duration:</h4>
    <div class='mb12 mr12 toggle-group align-center'>
      <label class='toggle-container'>
        <input name='duration' type='radio' value='10' checked>
        <div class='toggle toggle--active-null toggle--null'>10 min</div>
      </label>
      <label class='toggle-container'>
        <input name='duration' type='radio' value='20'>
        <div class='toggle toggle--active-null toggle--null'>20 min</div>
      </label>
      <label class='toggle-container'>
        <input name='duration' type='radio' value='30'>
        <div class='toggle toggle--active-null toggle--null'>30 min</div>
      </label>
    </div>
  </form>
</div> %>




<script>
	mapboxgl.accessToken = 'pk.eyJ1IjoiaGFsdWNhczkzIiwiYSI6ImNsOXhpZ3JrcjBha2szdXBhOGJ1dHEweWsifQ.HBOlhDzuu3Oq52Zhouf39w';
  const map = new mapboxgl.Map({
      container: 'map',
      // Choose from Mapbox's core styles, or make your own style with Mapbox Studio
      style: 'mapbox://styles/mapbox/streets-v12',
      center: [-79.4512, 43.6568],
      zoom: 11.5
  });

  const geocoder = new MapboxGeocoder({
      accessToken: mapboxgl.accessToken,
      marker: {
          color: 'orange'
      },
      mapboxgl: mapboxgl
  });

  const locator = new mapboxgl.GeolocateControl({
      positionOptions: {
        enableHighAccuracy: true
      },
      trackUserLocation: true,
      showUserHeading: true
    });

     geocoder.on('result', function(e) {
        console.log(e.result.center[0]);
        console.log(e.result.center[1])
    });


  const params = document.getElementById('params');
  // Create constants to use in getIso()
  const urlBase = 'https://api.mapbox.com/isochrone/v1/mapbox/';
  const lon = -77.034;
  const lat = 38.899;
  let profile = 'walking'; // Set the default routing profile
  let minutes = 10; // Set the default duration


  const marker = new mapboxgl.Marker({
    'color': '#314ccd'
  });


const lngLat = {
lon: lon,
lat: lat
};

  // Create a function that sets up the Isochrone API query then makes an fetch call
  async function getIso() {
    const query = await fetch(
      `${urlBase}${profile}/${lon},${lat}?contours_minutes=${minutes}&polygons=true&access_token=${mapboxgl.accessToken}`,
      { method: 'GET' }
    );
    const data = await query.json();
    map.getSource('iso').setData(data);
  }

  params.addEventListener('change', (event) => {
    if (event.target.name === 'profile') {
      profile = event.target.value;
    } else if (event.target.name === 'duration') {
      minutes = event.target.value;
    }
    getIso();
  });



  map.on('load', () => {
  // When the map loads, add the source and layer
    map.addControl(geocoder);
      map.addControl(locator);


    map.addSource('iso', {
      type: 'geojson',
      data: {
        type: 'FeatureCollection',
        features: []
      }
    });

    map.addLayer(
      {
        id: 'isoLayer',
        type: 'fill',
        // Use "iso" as the data source for this layer
        source: 'iso',
        layout: {},
        paint: {
          // The fill color for the layer is set to a light purple
          'fill-color': '#5a3fc0',
          'fill-opacity': 0.3
        }
      },
      'poi-label'
    );

    marker.setLngLat(lngLat).addTo(map);
    // Make the API call
    getIso();
  });

</script>
